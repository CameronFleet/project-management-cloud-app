# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: organise-service # NOTE: update this with your service name

app: basicapp-dev
tenant: cameronfleet

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: eu-west-2

  iamRoleStatements:
  - Effect: Allow
    Action:
    - dynamodb:DescribeTable
    - dynamodb:Query
    - dynamodb:Scan
    - dynamodb:GetItem
    - dynamodb:PutItem
    - dynamodb:UpdateItem
    Resource: arn:aws:dynamodb:eu-west-2:518548668754:table/User

  - Effect: Allow
    Action:
    - dynamodb:DescribeTable
    - dynamodb:Query
    - dynamodb:Scan
    - dynamodb:GetItem
    - dynamodb:PutItem
    - dynamodb:DeleteItem
    - dynamodb:UpdateItem
    Resource: arn:aws:dynamodb:eu-west-2:518548668754:table/Projects


functions:
  createDev:
    handler: users.createDev
    events:
    - http:
        path: users/create/dev
        method: post
        cors: true

  createProjectManager:
    handler: users.createProjectManager
    events:
    - http:
        path: users/create/project-manager
        method: post
        cors: true

  createAdmin:
    handler: users.createAdmin
    events:
    - http:
        path: users/create/admin
        method: post
        cors: true

  getProfile:
    handler: users.getProfile
    events:
    - http:
        path: users/profile
        method: post
        cors: true

  updateProfile:
    handler: users.updateProfile
    events:
    - http:
        path: users/update/profile
        method: post
        cors: true

  updateUser:
    handler: users.updateUser
    events:
    - http:
        path: users/update/user
        method: post
        cors: true

  getAllUsers:
    handler: users.getAllUsers
    events:
    - http:
        path: users/getAll
        method: get
        cors: true

  getAllDisplayNames:
    handler: users.getAllDisplayNames
    events:
    - http:
        path: users/getAll/displayNames
        method: get
        cors: true

  authorize:
    handler: authorizer.authorize
    events:
    - http:
        path: users/authorize
        method: post
        cors: true

  joinProject:
    handler: projects.joinProject
    events:
    - http:
        path: projects/join
        method: post
        cors: true

  approveMembers:
    handler: projects.approveMembers
    events:
    - http:
        path: projects/approveMembers
        method: post
        cors: true

  rejectPendingMembers:
    handler: projects.rejectPendingMembers
    events:
    - http:
        path: projects/rejectMembers
        method: post
        cors: true

  createProject:
    handler: projects.createProject
    events:
    - http:
        path: projects/createProject
        method: post
        cors: true

  updateProject:
    handler: projects.updateProject
    events:
    - http:
        path: projects/updateProject
        method: post
        cors: true

  getAllProjects:
    handler: projects.getAllProjects
    events:
    - http:
        path: projects/getAll
        method: get
        cors: true

  deleteProject:
    handler: projects.deleteProject
    events:
    - http:
        path: projects/delete
        method: post
        cors: true


#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
